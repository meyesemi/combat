// ===========Oooo==========================================Oooo========
// =  Copyright (C) 2014-2016 Gowin Semiconductor Technology Co.,Ltd.
// =                     All rights reserved.
// =====================================================================
//
//  __      __      __
//  \ \    /  \    / /   [File name   ] sdrc_top.v
//   \ \  / /\ \  / /    [Description ] SDRAM Controller
//    \ \/ /  \ \/ /     [Timestamp   ] Wednesday June 22 10:00:30 2016
//     \  /    \  /      [version     ] 1.0.0
//      \/      \/       
//
// ===========Oooo==========================================Oooo========
// Code Revision History :
// --------------------------------------------------------------------
// Ver: | Author |Mod. Date |Changes Made:
// V1.0 | XX     |06/22/16  |Initial version
// ===========Oooo==========================================Oooo========

`timescale 1 ns / 1 ps
//`define DISABLE_CPU_IO_BUS 0

//`include "sdrc_defines.v"  

module Gbit_PHY_test_RGMII (
                output reg I_rst_n,
                input clk,
                //MDC
                output	O_phy_mdc,
                output	IO_phy_mdio,
				// PHY1
				output	[3:0] O_phy1_txd,
				output	O_phy1_txen, 	
				output	O_phy1_gtxclk, 	
				input	[3:0] I_phy1_rxd,
				input	I_phy1_rxdv, 
				input	I_phy1_rxc, 	
				// PHY2
				output	[3:0] O_phy2_txd,
				output	O_phy2_txen, 	
				output	O_phy2_gtxclk, 	
				input	[3:0] I_phy2_rxd,
				input	I_phy2_rxdv, 
				input	I_phy2_rxc
            );
/*******************************************************************************
 *******************************************************************************/
        parameter  DELAY_VALUE=50;//;
	/*******************************************************************************
	 * reg and wire definintion
	 *******************************************************************************/
	reg [7:0]  Phy1_rxd,Phy2_rxd;  
	reg [7:0]  Phy1_rxd0,Phy2_rxd0;   
 
	reg Phy1_rxdv,Phy2_rxdv;  
	reg Phy1_rxdv0,Phy2_rxdv0;   
 
   reg  [31:0]         clk_cnt1;

	/*******************************************************************************/
	//assign   O_phy1_gtxclk = I_phy2_rxc;
	//assign   O_phy2_gtxclk = I_phy1_rxc;
    assign   IO_phy_mdio=0;
    assign   O_phy_mdc=0;

/*********************PHY1&PHY2 INPUT*******************************************/

   /* GW_PLL your_instance_name(
        .clkout(), //output clkout
        .lock(), //output lock
        .clkoutp(I_phy1_rxc0), //output clkoutp
        .clkin(I_phy1_rxc) //input clkin
    );*/

///////////////////
   generate
	genvar m ;
		for(m=0;m<=3;m=m+1) 
		begin
                IODELAY #(.C_STATIC_DLY(DELAY_VALUE))//integer,0~127
                IODELAY_inst_dq1(
                .DO(Phy1_rxd0[m]), 
                .DF(), 
                .DI(I_phy1_rxd[m]), 
                .SDTAP(0), 
                .SETN(0), 
                .VALUE(0)
                );

		end
   endgenerate

   generate
	genvar i ;
		for(i=0;i<=3;i=i+1) 
		begin
		IDDR	  U_IDDR_dq1
						(.Q0(Phy1_rxd[i]), 
						.Q1(Phy1_rxd[i+4]), 
						.D(Phy1_rxd0[i]), 
						.CLK(I_phy1_rxc) 
						);
		end
   endgenerate
///////////////////
IODELAY #(.C_STATIC_DLY(DELAY_VALUE))//integer,0~127
        IODELAY_inst_dv1(
        .DO(Phy1_rxdv0), 
        .DF(), 
        .DI(I_phy1_rxdv), 
        .SDTAP(0), 
        .SETN(0), 
        .VALUE(0)
        );

		IDDR	  U_IDDR_dv1
						(.Q0(Phy1_rxdv), 
						.Q1(), 
						.D(Phy1_rxdv0), 
						.CLK(I_phy1_rxc) 
						);

///////////////////
   generate
	genvar n ;
		for(n=0;n<=3;n=n+1) 
		begin
                IODELAY #(.C_STATIC_DLY(DELAY_VALUE))//integer,0~127
                IODELAY_inst_dq2(
                .DO(Phy2_rxd0[n]), 
                .DF(), 
                .DI(I_phy2_rxd[n]), 
                .SDTAP(0), 
                .SETN(0), 
                .VALUE(0)
                );

		end
   endgenerate

   generate
	genvar k ;
		for(k=0;k<=3;k=k+1) 
		begin
		IDDR	  U_IDDR_dq2
						(.Q0(Phy2_rxd[k]), 
						.Q1(Phy2_rxd[k+4]), 
						.D(Phy2_rxd0[k]), 
						.CLK(I_phy2_rxc) 
						);
		end
   endgenerate

///////////////////
IODELAY #(.C_STATIC_DLY(DELAY_VALUE))//integer,0~127
        IODELAY_inst_dv2(
        .DO(Phy2_rxdv0), 
        .DF(), 
        .DI(I_phy2_rxdv), 
        .SDTAP(0), 
        .SETN(0), 
        .VALUE(0)
        );

		IDDR	  U_IDDR_dv2
						(.Q0(Phy2_rxdv), 
						.Q1(), 
						.D(Phy2_rxdv0), 
						.CLK(I_phy2_rxc) 
						);

/*********************PHY1&PHY2 OUTPUT*******************************************/
  generate
	genvar j ;
		for(j=0;j<=3;j=j+1) 
		begin
		ODDR	  U_ODDR_dq1
						(.Q0(O_phy1_txd[j]), 
						.Q1(),
						.D0(Phy2_rxd[j]), 
						.D1(Phy2_rxd[j+4]), 
						.TX(1),
						.CLK(I_phy2_rxc) 
						);
		end
   endgenerate
		ODDR	  U_ODDR_en1
						(.Q0(O_phy1_txen), 
						.Q1(),

						.D0(Phy2_rxdv), 
						.D1(Phy2_rxdv), 
						.TX(1),

						.CLK(I_phy2_rxc) 
						);
		ODDR	  U_ODDR_clk1
						(.Q0(O_phy1_gtxclk), 
						.Q1(),

						.D0(1), 
						.D1(0), 
						.TX(1),

						.CLK(I_phy2_rxc) 
						);
  generate
	genvar l ;
		for(l=0;l<=3;l=l+1) 
		begin
		ODDR	  U_ODDR_dq2
						(.Q0(O_phy2_txd[l]), 
						.Q1(),

						.D0(Phy1_rxd[l]), 
						.D1(Phy1_rxd[l+4]), 
						.TX(1),

						.CLK(I_phy1_rxc) 
						);
		end
   endgenerate
		ODDR	  U_ODDR_en2
						(.Q0(O_phy2_txen), 
						.Q1(),

						.D0(Phy1_rxdv), 
						.D1(Phy1_rxdv), 
						.TX(1),

						.CLK(I_phy1_rxc) 
						);
		ODDR	  U_ODDR_clk2
						(.Q0(O_phy2_gtxclk), 
						.Q1(),

						.D0(1), 
						.D1(0), 
						.TX(1),

						.CLK(I_phy1_rxc) 
						);
 
always @(posedge clk)
begin
  if(clk_cnt1 < 500)
    clk_cnt1 <= clk_cnt1 + 1;
end

always @(posedge clk)
begin
  if(clk_cnt1 < 500)
    I_rst_n<=0;
	else
    I_rst_n<=1;
end

endmodule // sdram_controller
